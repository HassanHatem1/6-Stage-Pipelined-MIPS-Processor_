This project is a 6-stage pipelined MIPS, RISC-V, in-order, single-issue processor. It is based on the the standard MIPS, except its a 16-bit procesor and the data memory(cache) is divided into 2 stages, M1 and M2. Data is written to the memory
in the first stage M1, while reading data would make it available only after M2; this means that loaded data (Load,LDD, instruction is only available after M2).

The processor has 8 16-bit general purpose registers(R0->R7), a Flag Register (Condition Code Register, CCR), PC,and SP. 

The data cache is 1024 long and 16-bits wide, a total size of 2 MB. The Stack Pointer (SP) is initialized to 2^10-1 (1024-), 1023,and points to the top of the stack.

Any program MUST be initialized with the RESET signal; upon Reset, the processor loads the Reset Address (address of the first line of code) from address #0 from the instruction cache(M[0]) into
the PC and begins execution from there.

The processor supports an interrupt that is set ONCE before fetching the interrupted instruction; upon the interrupt signal, the processor will finish the currently fetched instructions and
push the PC as well as the flags on top of the stack. Then, it loads the address of the Interrupt Service Routine (ISR) from address #1 in the instruction cache (M[1]) into the PC executes the
service routine; upon service, an RTI instruction signals the end of the interrupt service routine and the PC of the instruction immediately after the interrupted instruction as well as the 
flag register are loaded back to resume execution.

There are three flags that are updated after each arithmetic or logical (AND,OR,NOT) operation: Zero Flag, Carry Flag, and Sign Flag.

The processor predicts UNTAKEN for all branches. 

The processor supports 35 instructions, supporting 7 types of branching instructions,a variety of arithmetic and logical operations. 
Any instruction consists is of length 16-bits, of which 5 are opcode bits, 6/9 bits for register values (000->111) depending whether the instruction is R-type, I-type, or J-type, and the rest
are either used as function bits (to distinguish instructions with same opcode) or not used.


*Since each instruction opcode is 5 bits, this means we can support only a maximum of 2^5(32) instructions; however, some branching instructions have been concatenated together to have the same 
opcode but are distinguished by 3-bit function bits at the end of the 16-bit instruction.
